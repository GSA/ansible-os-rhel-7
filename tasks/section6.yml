- name: "SCORED | 6.1.2 | PATCH | Ensure permissions on /etc/passwd are configured"
  file:
      dest: /etc/passwd
      owner: root
      group: root
      mode: 0644
  tags:
      - level1
      - level2
      - patch
      - rule_6.1.2

- name: "SCORED | 6.1.3 | PATCH | Ensure permissions on /etc/shadow are configured"
  file:
      dest: /etc/shadow
      owner: root
      group: root
      mode: 0000
  tags:
      - level1
      - level2
      - patch
      - rule_6.1.3

- name: "SCORED | 6.1.4 | PATCH | Ensure permissions on /etc/group are configured"
  file:
      dest: /etc/group
      owner: root
      group: root
      mode: 0600
  tags:
      - level1
      - level2
      - patch
      - rule_6.1.4

- name: "SCORED | 6.1.5 | PATCH | Ensure permissions on /etc/gshadow are configured"
  file:
      dest: /etc/gshadow
      owner: root
      group: root
      mode: 0000
  tags:
      - level1
      - level2
      - patch
      - rule_6.1.5

- name: "SCORED | 6.1.6 | PATCH | Ensure permissions on /etc/passwd- are configured"
  file:
      dest: /etc/passwd-
      owner: root
      group: root
      mode: 0600
  tags:
      - level1
      - level2
      - patch
      - rule_6.1.6

- name: "SCORED | 6.1.7 | PATCH | Ensure permissions on /etc/shadow- are configured"
  file:
      dest: /etc/shadow-
      owner: root
      group: root
      mode: 0000
  tags:
      - level1
      - level2
      - patch
      - rule_6.1.7

- name: "SCORED | 6.1.8 | PATCH | Ensure permissions on /etc/group- are configured"
  file:
      dest: /etc/group-
      owner: root
      group: root
      mode: 0600
  tags:
      - level1
      - level2
      - patch
      - rule_6.1.8

- name: "SCORED | 6.1.9 | PATCH | Ensure permissions on /etc/gshadow- are configured"
  file:
      dest: /etc/gshadow-
      owner: root
      group: root
      mode: 0600
  tags:
      - level1
      - level2
      - patch
      - rule_6.1.9

- name: "SCORED | 6.2.1 | PATCH | Ensure password fields are not empty"
  command: passwd -l {{ item }}
  with_items: "{{ empty_password_accounts.stdout_lines }}"
  when: empty_password_accounts.rc
  tags:
      - level1
      - level2
      - patch
      - rule_6.2.1

- name: "SCORED | 6.2.2 | PATCH | Ensure no legacy '+' entries exist in /etc/passwd"
  command: sed -i '/^+/ d' /etc/passwd
  tags:
      - level1
      - level2
      - patch
      - rule_6.2.2

- name: "SCORED | 6.2.3 | PATCH | Ensure no legacy '+' entries exist in /etc/shadow"
  command: sed -i '/^+/ d' /etc/shadow
  tags:
      - level1
      - level2
      - patch
      - rule_6.2.3

- name: "SCORED | 6.2.4 | PATCH | Ensure no legacy '+' entries exist in /etc/group"
  command: sed -i '/^+/ d' /etc/group
  tags:
      - level1
      - level2
      - patch
      - rule_6.2.4

- name: "PRELIM | Gather UID 0 accounts other than root"
  shell: "cat /etc/passwd | awk -F: '($3 == 0 && $1 != \"root\") {i++;print $1 } END {exit i}'"
  register: uid_zero_accounts_except_root
  changed_when: no
  check_mode: no

- name: "SCORED | 6.2.5 | PATCH | Ensure root is the only UID 0 account"
  command: passwd -l {{ item }}
  with_items: "{{ uid_zero_accounts_except_root.stdout_lines }}"
  when: uid_zero_accounts_except_root.rc
  tags:
      - level1
      - level2
      - patch
      - rule_6.2.5

- name: "SCORED | 6.2.6 | Ensure root PATH Integrity"
  shell: |
    if [ "`echo $PATH | /bin/grep :: `" != "" ]; then
      echo "Empty Directory in PATH (::)"
    fi
    if [ "`echo $PATH | bin/grep :$`" != "" ]; then
      echo "Trailing : in PATH"
    fi
    p=`echo $PATH | /bin/sed -e 's/::/:/' -e 's/:$//' -e 's/:/ /g'`
    set -- $p
    while [ "$1" != "" ]; do
      if [ "$1" = "." ]; then
        echo "PATH contains ."
        shift
        continue
      fi
      if [ -d $1 ]; then
        dirperm=`/bin/ls -ldH $1 | /bin/cut -f1 -d" "`
        if [ `echo $dirperm | /bin/cut -c6 ` != "-" ]; then
          echo "Group Write permission set on directory $1"
        fi
        if [ `echo $dirperm | /bin/cut -c9 ` != "-" ]; then
          echo "Other Write permission set on directory $1"
        fi
        dirown=`ls -ldH $1 | awk '{print $3}'`
        if [ "$dirown" != "root" ] ; then
          echo $1 is not owned by root
        fi
      else
        echo $1 is not a directory
      fi
      shift
    done
  register: result6_2_6
  changed_when: "result6_2_6.stdout"
  failed_when: "result6_2_6.stdout"
  tags:
    - id_6.2.6


- name: "SCORED | 6.2.7 | Ensure all users' home directories exist"
  shell: |
    cat /etc/passwd | awk -F: '{ print $1 " " $3 " " $6 }' | while read user uid dir; do
    if [ $uid -ge 1000 -a ! -d "$dir" -a $user != "nfsnobody" ]; then
        echo "The home directory ($dir) of user $user does not exist."
    fi
    done
  register: result6_2_7
  changed_when: "result6_2_7.stdout"
  failed_when: "result6_2_7.stdout"
  ignore_errors: yes
  tags:
    - id_6.2.7

- name: "SCORED | 6.2.8 | Check Permissions on User Home Directories"
  shell: |
    for dir in `/bin/cat /etc/passwd | /bin/egrep -v '(root|halt|sync|shutdown)' |\
      /bin/awk -F: '($8 == "PS" && $7 != "/sbin/nologin") { print $6 }'`; do
      dirperm=`/bin/ls -ld $dir | /bin/cut -f1 -d" "`
      if [ `echo $dirperm | /bin/cut -c6 ` != "-" ]; then
        echo "Group Write permission set on directory $dir"
      fi
      if [ `echo $dirperm | /bin/cut -c8 ` != "-" ]; then
        echo "Other Read permission set on directory $dir"
      fi
      if [ `echo $dirperm | /bin/cut -c9 ` != "-" ]; then
        echo "Other Write permission set on directory $dir"
      fi
      if [ `echo $dirperm | /bin/cut -c10 ` != "-" ]; then
        echo "Other Execute permission set on directory $dir"
      fi
    done
  register: result6_2_8
  changed_when: "result6_2_8.stdout"
  failed_when: "result6_2_8.stdout"
  ignore_errors: yes
  tags:
    - id_6.2.8

- name: "PRELIM | List users accounts"
  command: "awk -F: '{print $1}' /etc/passwd"
  register: users
  changed_when: no
  check_mode: no

- name: "SCORED | 6.2.10 Check User Dot File Permissions"
  shell: |
    for dir in `/bin/cat /etc/passwd | /bin/egrep -v '(root|sync|halt|shutdown)' |
      /bin/awk -F: '($7 != "/sbin/nologin") { print $6 }'`; do
      for file in $dir/.[A-Za-z0-9]*; do
        if [ ! -h "$file" -a -f "$file" ]; then
          fileperm=`/bin/ls -ld $file | /bin/cut -f1 -d" "`
          if [ `echo $fileperm | /bin/cut -c6 ` != "-" ]; then
            echo "Group Write permission set on file $file"
          fi
          if [ `echo $fileperm | /bin/cut -c9 ` != "-" ]; then
            echo "Other Write permission set on file $file"
          fi
        fi
      done
    done
  register: result6_2_10
  changed_when: "result6_2_10.stdout"
  failed_when: "result6_2_10.stdout"
  tags:
    - id_6.2.10


- name: "SCORED | 6.2.11 | PATCH | Ensure no users have .forward files"
  file:
      state: absent
      dest: "~{{ item }}/.forward"
  with_items: "{{ users.stdout_lines }}"
  tags:
      - level1
      - level2
      - patch
      - rule_6.2.11

- name: "SCORED | 6.2.12 | PATCH | Ensure no users have .netrc files"
  file:
      state: absent
      dest: "~{{ item }}/.netrc"
  with_items: "{{ users.stdout_lines }}"
  tags:
      - level1
      - level2
      - patch
      - rule_6.2.12

- name: "SCORED | 6.2.13 |Check for Presence of User .netrc Files"
  shell:  for h in $(/bin/awk -F':' '$7 !~ /\/sbin\/nologin/ && $7 !~ /\/bin\/false/ { print $6 }' /etc/passwd); do if [[ -f $h/.netrc && -s $h/.netrc ]]; then echo $h; fi ; done
  register: result6_2_13
  changed_when: "result6_2_13.stdout"
  check_mode: no
  tags:
    - id_6.2.13

- name: "SCORED | 6.2.14 | PATCH | Ensure no users have .rhosts files"
  file:
      state: absent
      dest: "~{{ item }}/.rhosts"
  with_items: "{{ users.stdout_lines }}"
  tags:
      - level1
      - level2
      - patch
      - rule_6.2.14
