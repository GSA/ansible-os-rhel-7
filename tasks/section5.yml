- name: "SCORED | 5.1.1 | Ensure cron daemon is enabled"
  service:
      name: crond
      enabled: yes
  tags:
      - id_5.1.1

- name: "SCORED | 5.1.2 | Ensure permissions on /etc/crontab are configured"
  file:
      dest: /etc/crontab
      owner: root
      group: root
      mode: 0600
  tags:
      - id_5.1.2

- name: "SCORED | 5.1.3 | Ensure permissions on /etc/cron.hourly are configured"
  file:
      dest: /etc/cron.hourly
      owner: root
      group: root
      mode: 0600
  tags:
      - id_5.1.3

- name: "SCORED | 5.1.4 | Ensure permissions on /etc/cron.daily are configured"
  file:
      dest: /etc/cron.daily
      owner: root
      group: root
      mode: 0600
  tags:
      - id_5.1.4

- name: "SCORED | 5.1.5 | Ensure permissions on /etc/cron.weekly are configured"
  file:
      dest: /etc/cron.weekly
      owner: root
      group: root
      mode: 0600
  tags:
      - id_5.1.5

- name: "SCORED | 5.1.6 | Ensure permissions on /etc/cron.monthly are configured"
  file:
      dest: /etc/cron.monthly
      owner: root
      group: root
      mode: 0600
  tags:
      - id_5.1.6

- name: "SCORED | 5.1.7 | Ensure permissions on /etc/cron.d are configured"
  file:
      dest: /etc/cron.d
      state: directory
      owner: root
      group: root
      mode: 0600
  tags:
      - id_5.1.7

- name: "SCORED | 5.1.8 | Ensure at/cron is restricted to authorized users"
  file:
      dest: /etc/at.deny
      state: absent
  tags:
      - id_5.1.8

- name: "SCORED | 5.1.8 | Ensure at/cron is restricted to authorized users"
  file:
      dest: /etc/at.allow
      state: touch
      owner: root
      group: root
      mode: 0600
  tags:
      - id_5.1.8

- name: "SCORED | 5.1.8 | Ensure at/cron is restricted to authorized users"
  file:
      dest: /etc/cron.deny
      state: absent
  tags:
      - id_5.1.8

- name: "SCORED | 5.1.8 | Ensure at/cron is restricted to authorized users"
  file:
      dest: /etc/cron.allow
      state: touch
      owner: root
      group: root
      mode: 0600
  tags:
      - id_5.1.8

- name: "SCORED | 5.2.1 | Ensure permissions on /etc/ssh/sshd_config are configured"
  file:
      dest: /etc/ssh/sshd_config
      state: file
      owner: root
      group: root
      mode: 0600
  tags:
      - id_5.2.1

- name: "SCORED | 5.2.2 | Ensure SSH Protocol is set to 2"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^Protocol'
      line: 'Protocol 2'
  tags:
      - id_5.2.2

- name: "SCORED | 5.2.3 | Ensure SSH LogLevel is set to INFO"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^LogLevel'
      line: 'LogLevel INFO'
  tags:
      - id_5.2.3

- name: "SCORED | 5.2.4 | Ensure SSH X11 forwarding is disabled"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^X11Forwarding'
      line: 'X11Forwarding no'
  tags:
      - id_5.2.4

- name: "SCORED | 5.2.5 | Ensure SSH MaxAuthTries is set to 4 or less"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^(#)?MaxAuthTries \d'
      line: 'MaxAuthTries 4'
  tags:
      - id_5.2.5

- name: "SCORED | 5.2.6 | Ensure SSH IgnoreRhosts is enabled"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^IgnoreRhosts'
      line: 'IgnoreRhosts yes'
  tags:
      - id_5.2.6

- name: "SCORED | 5.2.7 | Ensure SSH HostbasedAuthentication is disabled"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^HostbasedAuthentication'
      line: 'HostbasedAuthentication no'
  tags:
      - id_5.2.7

- name: "SCORED | 5.2.8 | Ensure SSH root login is disabled"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^PermitRootLogin'
      line: 'PermitRootLogin no'
  tags:
      - id_5.2.8

- name: "SCORED | 5.2.9 | Ensure SSH PermitEmptyPasswords is disabled"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^PermitEmptyPasswords'
      line: 'PermitEmptyPasswords no'
  tags:
      - id_5.2.9

- name: "SCORED | 5.2.10 | Ensure SSH PermitUserEnvironment is disabled"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^PermitUserEnvironment'
      line: 'PermitUserEnvironment no'
  tags:
      - id_5.2.10

- name: "SCORED | 5.2.11 | Ensure only approved ciphers are used"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^Ciphers'
      line: 'Ciphers aes128-ctr,aes192-ctr,aes256-ctr'
  tags:
      - id_5.2.11

- name: "SCORED | 5.2.12 | Ensure only approved MAC algorithms are used"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^MACs'
      line: 'MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com'
  tags:
      - id_5.2.12

- name: "SCORED | 5.2.13 | Ensure SSH Idle Timeout Interval is configured"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^ClientAliveInterval'
      line: 'ClientAliveInterval 900'
  tags:
      - id_5.2.13

- name: "SCORED | 5.2.14 | Ensure SSH LoginGraceTime is set to one minute or less"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^LoginGraceTime'
      line: 'LoginGraceTime 60'
  tags:
      - id_5.2.14

- name: "SCORED | 5.2.16 | Ensure SSH warning banner is configured"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^Banner'
      line: 'Banner /etc/issue'
  tags:
      - id_5.2.16

- name: "SCORED | 5.3.1 | Ensure password creation requirements are configured"
  lineinfile:
      state: present
      dest: /etc/security/pwquality.conf
      regexp: '^{{ item.key }}'
      line: '{{ item.key }} = {{ item.value }}'
  with_items:
      - { key: 'minlen',  value: '8' }
      - { key: 'dcredit', value: '-1' }
      - { key: 'ucredit', value: '-1' }
      - { key: 'ocredit', value: '-1' }
      - { key: 'lcredit', value: '-1' }
  tags:
      - id_5.3.1

- name: "SCORED | 5.3.2 | Ensure lockout for failed password attempts is configured; update existing pam_faillock.so preauth"
  pamd:
    name: password-auth
    type: auth
    control: required
    module_path: pam_faillock.so
    module_arguments: 'preauth
        audit
        silent
        deny=5
        unlock_time=1800'
    state: updated
  when: pam_password_auth.stdout.find('pam_faillock.so preauth') != -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 | Ensure lockout for failed password attempts is configured; create new pam_faillock.so preauth"
  pamd:
    name: password-auth
    type: auth
    control: required
    module_path:  pam_deny.so
    new_type: auth
    new_control: required
    new_module_path: pam_faillock.so
    module_arguments: 'preauth audit silent deny=5 unlock_time=1800'
    state: after
  when: pam_password_auth.stdout.find('pam_faillock.so preauth') == -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 | Ensure lockout for failed password attempts is configured; create new pam_unix.so"
  pamd:
    name: password-auth
    type: auth
    control: required
    module_path:  pam_faillock.so
    new_type: auth
    new_control: '[success=1 default=bad]'
    new_module_path: pam_unix.so
    state: after
  when: pam_password_auth.stdout.find('pam_unxi.so') == -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 | Ensure lockout for failed password attempts is configured; update pam_unix.so"
  pamd:
    name: password-auth
    type: auth
    control: '[success=1 default=bad]'
    module_path: pam_unix.so
    state: updated
  when: pam_password_auth.stdout.find('pam_unxi.so') != -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 | Ensure lockout for failed password attempts is configured; update existing pam_faillock.so authfailed"
  pamd:
    name: password-auth
    type: auth
    control: '[default=die]'
    module_path: pam_faillock.so
    module_arguments: 'authfail
        audit
        deny=5
        unlock_time=1800'
    state: updated
  when: pam_password_auth.stdout.find('pam_faillock.so authfail') != -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 | Ensure lockout for failed password attempts is configured; create new pam_faillock.so authfailed"
  pamd:
    name: password-auth
    type: auth
    control: '[success=1 default=bad]'
    module_path:  pam_unix.so
    new_type: auth
    new_control: '[default=die]'
    new_module_path: pam_faillock.so
    module_arguments: 'authfail audit deny=5 unlock_time=1800'
    state: after
  when: pam_password_auth.stdout.find('pam_faillock.so authfail') == -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 | Ensure lockout for failed password attempts is configured; update existing pam_faillock.so authsucceed"
  pamd:
    name: password-auth
    type: auth
    control: sufficient
    module_path: pam_faillock.so
    module_arguments: 'authfail
        audit
        deny=5
        unlock_time=1800'
    state: updated
  when: pam_password_auth.stdout.find('pam_faillock.so authsucc') != -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 | Ensure lockout for failed password attempts is configured; create new pam_faillock.so authsucceed"
  pamd:
    name: password-auth
    type: auth
    control: '[default=die]'
    module_path:  pam_faillock.so
    new_type: auth
    new_control: sufficient
    new_module_path: pam_faillock.so
    module_arguments: 'authsucc audit deny=5 unlock_time=1800'
    state: after
  when: pam_password_auth.stdout.find('pam_faillock.so authsucc') == -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 System-Auth | Ensure lockout for failed password attempts is configured; update existing pam_faillock.so preauth"
  pamd:
    name: system-auth
    type: auth
    control: required
    module_path: pam_faillock.so
    module_arguments: 'preauth
        audit
        silent
        deny=5
        unlock_time=1800'
    state: updated
  when: pam_system_auth.stdout.find('pam_faillock.so preauth') != -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 System-Auth | Ensure lockout for failed password attempts is configured; create new pam_faillock.so preauth"
  pamd:
    name: system-auth
    type: auth
    control: required
    module_path:  pam_deny.so
    new_type: auth
    new_control: required
    new_module_path: pam_faillock.so
    module_arguments: 'preauth audit silent deny=5 unlock_time=1800'
    state: after
  when: pam_system_auth.stdout.find('pam_faillock.so preauth') == -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 System-Auth | Ensure lockout for failed password attempts is configured; create new pam_unix.so"
  pamd:
    name: system-auth
    type: auth
    control: required
    module_path:  pam_faillock.so
    new_type: auth
    new_control: '[success=1 default=bad]'
    new_module_path: pam_unix.so
    state: after
  when: pam_system_auth.stdout.find('pam_unxi.so') == -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 System-Auth | Ensure lockout for failed password attempts is configured; update pam_unix.so"
  pamd:
    name: system-auth
    type: auth
    control: '[success=1 default=bad]'
    module_path: pam_unix.so
    state: updated
  when: pam_system_auth.stdout.find('pam_unxi.so') != -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 System-Auth | Ensure lockout for failed password attempts is configured; update existing pam_faillock.so authfailed"
  pamd:
    name: system-auth
    type: auth
    control: '[default=die]'
    module_path: pam_faillock.so
    module_arguments: 'authfail
        audit
        deny=5
        unlock_time=1800'
    state: updated
  when: pam_system_auth.stdout.find('pam_faillock.so authfail') != -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 System-Auth | Ensure lockout for failed password attempts is configured; create new pam_faillock.so authfailed"
  pamd:
    name: system-auth
    type: auth
    control: '[success=1 default=bad]'
    module_path:  pam_unix.so
    new_type: auth
    new_control: '[default=die]'
    new_module_path: pam_faillock.so
    module_arguments: 'authfail audit deny=5 unlock_time=1800'
    state: after
  when: pam_system_auth.stdout.find('pam_faillock.so authfail') == -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 System-Auth | Ensure lockout for failed password attempts is configured; update existing pam_faillock.so authsucceed"
  pamd:
    name: system-auth
    type: auth
    control: sufficient
    module_path: pam_faillock.so
    module_arguments: 'authfail
        audit
        deny=5
        unlock_time=1800'
    state: updated
  when: pam_system_auth.stdout.find('pam_faillock.so authsucc') != -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.2 System-Auth | Ensure lockout for failed password attempts is configured; create new pam_faillock.so authsucceed"
  pamd:
    name: system-auth
    type: auth
    control: '[default=die]'
    module_path:  pam_faillock.so
    new_type: auth
    new_control: sufficient
    new_module_path: pam_faillock.so
    module_arguments: 'authsucc audit deny=5 unlock_time=1800'
    state: after
  when: pam_system_auth.stdout.find('pam_faillock.so authsucc') == -1
  tags:
      - id_5.3.2

- name: "SCORED | 5.3.3 | Ensure password reuse is limited"
  pamd:
    name: password-auth
    type: password
    control: sufficient
    module_path: pam_unix.so
    module_arguments: 'sha512 shadow nullok try_first_pass use_authtok remember=24'
    state: updated
  tags:
      - id_5.3.3

- name: "SCORED | 5.3.3 System-Auth | Ensure password reuse is limited"
  pamd:
    name: system-auth
    type: password
    control: sufficient
    module_path: pam_unix.so
    module_arguments: 'sha512 shadow nullok try_first_pass use_authtok remember=24'
    state: updated
  tags:
      - id_5.3.3

- name: "SCORED | 5.3.4 | Ensure password hashing algorithm is SHA-512"
  command: authconfig --passalgo=sha512 --update
  tags:
      - id_5.3.4

- name: "SCORED | 5.4.1.1 | Ensure password expiration is 90 days or less"
  lineinfile:
      state: present
      dest: /etc/login.defs
      regexp: '^PASS_MAX_DAYS'
      line: 'PASS_MAX_DAYS 90'
  tags:
      - id_5.4.1.1

- name: "SCORED | 5.4.1.2 | Ensure minimum days between password changes is 7 or more"
  lineinfile:
      state: present
      dest: /etc/login.defs
      regexp: '^PASS_MIN_DAYS'
      line: 'PASS_MIN_DAYS 0'
  tags:
      - id_5.4.1.2

- name: "SCORED | 5.4.1.3 | Ensure password expiration warning days is 7 or more"
  lineinfile:
      state: present
      dest: /etc/login.defs
      regexp: '^PASS_WARN_AGE'
      line: 'PASS_WARN_AGE 7'
  tags:
      - id_5.4.1.3

- name: "SCORED | 5.4.1.4 | Lock Inactive User Accounts"
  command: /usr/sbin/useradd -D -f 35
  when: lock_inactive
  tags:
    -  id_5.4.1.4

- name: "SCORED | 5.4.3 | Ensure default group for the root account is GID 0"
  command: usermod -g 0 root
  tags:
      - id_5.4.3

- name: "SCORED | 5.4.4 Set Default umask for Users"
  lineinfile:
    state=present
    create=yes
    dest=/etc/bashrc
    line="umask 027"
  ignore_errors: true
  tags:
    - id_5.4.4

- name: "SCORED | 5.4.4 Set Default umask for Users"
  lineinfile:
    state=present
    create=yes
    dest=/etc/profile
    line="umask 027"
  ignore_errors: true
  tags:
    - id_5.4.4

- name: "SCORED | 5.6 | Ensure access to the su command is restricted"
  lineinfile:
      state: present
      dest: /etc/pam.d/su
      regexp: '^#auth\s+required\s+pam_wheel\.so'
      line: 'auth           required        pam_wheel.so use_uid'
  tags:
      - id_5.6
